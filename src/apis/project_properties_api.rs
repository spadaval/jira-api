/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct ProjectPropertiesApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl ProjectPropertiesApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> ProjectPropertiesApiClient {
        ProjectPropertiesApiClient { configuration }
    }
}

pub trait ProjectPropertiesApi {
    fn delete_project_property(
        &self,
        project_id_or_key: &str,
        property_key: &str,
    ) -> Result<(), Error>;
    fn get_project_property(
        &self,
        project_id_or_key: &str,
        property_key: &str,
    ) -> Result<crate::models::EntityProperty, Error>;
    fn get_project_property_keys(
        &self,
        project_id_or_key: &str,
    ) -> Result<crate::models::PropertyKeys, Error>;
    fn set_project_property_put(
        &self,
        project_id_or_key: &str,
        property_key: &str,
        body: serde_json::Value,
    ) -> Result<serde_json::Value, Error>;
}

impl ProjectPropertiesApi for ProjectPropertiesApiClient {
    fn delete_project_property(
        &self,
        project_id_or_key: &str,
        property_key: &str,
    ) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}",
            configuration.base_path,
            projectIdOrKey = crate::apis::urlencode(project_id_or_key),
            propertyKey = crate::apis::urlencode(property_key)
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn get_project_property(
        &self,
        project_id_or_key: &str,
        property_key: &str,
    ) -> Result<crate::models::EntityProperty, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}",
            configuration.base_path,
            projectIdOrKey = crate::apis::urlencode(project_id_or_key),
            propertyKey = crate::apis::urlencode(property_key)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_project_property_keys(
        &self,
        project_id_or_key: &str,
    ) -> Result<crate::models::PropertyKeys, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/project/{projectIdOrKey}/properties",
            configuration.base_path,
            projectIdOrKey = crate::apis::urlencode(project_id_or_key)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn set_project_property_put(
        &self,
        project_id_or_key: &str,
        property_key: &str,
        body: serde_json::Value,
    ) -> Result<serde_json::Value, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}",
            configuration.base_path,
            projectIdOrKey = crate::apis::urlencode(project_id_or_key),
            propertyKey = crate::apis::urlencode(property_key)
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
