/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct IssueCustomFieldOptionsApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl IssueCustomFieldOptionsApiClient {
    pub fn new(
        configuration: Rc<configuration::Configuration>,
    ) -> IssueCustomFieldOptionsApiClient {
        IssueCustomFieldOptionsApiClient { configuration }
    }
}

pub trait IssueCustomFieldOptionsApi {
    fn create_custom_field_options_post(
        &self,
        field_id: i64,
        bulk_create_custom_field_option_request: crate::models::BulkCreateCustomFieldOptionRequest,
    ) -> Result<serde_json::Value, Error>;
    fn get_custom_field_option(&self, id: &str) -> Result<crate::models::CustomFieldOption, Error>;
    fn get_options_for_field(
        &self,
        field_id: i64,
        start_at: Option<i64>,
        max_results: Option<i32>,
    ) -> Result<crate::models::PageBeanCustomFieldOptionDetails, Error>;
    fn update_custom_field_options_put(
        &self,
        field_id: i64,
        update_custom_field_option: crate::models::UpdateCustomFieldOption,
    ) -> Result<serde_json::Value, Error>;
}

impl IssueCustomFieldOptionsApi for IssueCustomFieldOptionsApiClient {
    fn create_custom_field_options_post(
        &self,
        field_id: i64,
        bulk_create_custom_field_option_request: crate::models::BulkCreateCustomFieldOptionRequest,
    ) -> Result<serde_json::Value, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/customField/{fieldId}/option",
            configuration.base_path,
            fieldId = field_id
        );
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&bulk_create_custom_field_option_request);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_custom_field_option(&self, id: &str) -> Result<crate::models::CustomFieldOption, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/customFieldOption/{id}",
            configuration.base_path,
            id = crate::apis::urlencode(id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_options_for_field(
        &self,
        field_id: i64,
        start_at: Option<i64>,
        max_results: Option<i32>,
    ) -> Result<crate::models::PageBeanCustomFieldOptionDetails, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/customField/{fieldId}/option",
            configuration.base_path,
            fieldId = field_id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn update_custom_field_options_put(
        &self,
        field_id: i64,
        update_custom_field_option: crate::models::UpdateCustomFieldOption,
    ) -> Result<serde_json::Value, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/customField/{fieldId}/option",
            configuration.base_path,
            fieldId = field_id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&update_custom_field_option);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
