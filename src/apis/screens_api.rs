/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct ScreensApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl ScreensApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> ScreensApiClient {
        ScreensApiClient { configuration }
    }
}

pub trait ScreensApi {
    fn add_field_to_default_screen_post(&self, field_id: &str) -> Result<serde_json::Value, Error>;
    fn add_screen_tab_field_post(
        &self,
        screen_id: i64,
        tab_id: i64,
        add_field_bean: crate::models::AddFieldBean,
    ) -> Result<crate::models::ScreenableField, Error>;
    fn add_screen_tab_post(
        &self,
        screen_id: i64,
        screenable_tab: crate::models::ScreenableTab,
    ) -> Result<crate::models::ScreenableTab, Error>;
    fn delete_screen_tab(&self, screen_id: i64, tab_id: i64) -> Result<(), Error>;
    fn get_all_screen_schemes(
        &self,
        start_at: Option<i64>,
        max_results: Option<i32>,
    ) -> Result<crate::models::PageBeanScreenScheme, Error>;
    fn get_all_screen_tab_fields(
        &self,
        screen_id: i64,
        tab_id: i64,
        project_key: Option<&str>,
    ) -> Result<Vec<crate::models::ScreenableField>, Error>;
    fn get_all_screen_tabs(
        &self,
        screen_id: i64,
        project_key: Option<&str>,
    ) -> Result<Vec<crate::models::ScreenableTab>, Error>;
    fn get_all_screens(
        &self,
        start_at: Option<i64>,
        max_results: Option<i32>,
    ) -> Result<crate::models::PageBeanScreen, Error>;
    fn get_available_screen_fields(
        &self,
        screen_id: i64,
    ) -> Result<Vec<crate::models::ScreenableField>, Error>;
    fn get_issue_type_screen_scheme_mappings(
        &self,
        start_at: Option<i64>,
        max_results: Option<i32>,
        issue_type_screen_scheme_id: Option<Vec<i64>>,
    ) -> Result<crate::models::PageBeanIssueTypeScreenSchemeItem, Error>;
    fn get_issue_type_screen_scheme_project_associations(
        &self,
        start_at: Option<i64>,
        max_results: Option<i32>,
        project_id: Option<Vec<i64>>,
    ) -> Result<crate::models::PageBeanIssueTypeScreenSchemesProjects, Error>;
    fn get_screens_for_field(
        &self,
        field_id: &str,
        start_at: Option<i64>,
        max_results: Option<i32>,
    ) -> Result<crate::models::PageBeanScreen, Error>;
    fn move_screen_tab_field_post(
        &self,
        screen_id: i64,
        tab_id: i64,
        id: &str,
        move_field_bean: crate::models::MoveFieldBean,
    ) -> Result<serde_json::Value, Error>;
    fn move_screen_tab_post(
        &self,
        screen_id: i64,
        tab_id: i64,
        pos: i32,
    ) -> Result<serde_json::Value, Error>;
    fn remove_screen_tab_field_delete(
        &self,
        screen_id: i64,
        tab_id: i64,
        id: &str,
    ) -> Result<(), Error>;
    fn rename_screen_tab_put(
        &self,
        screen_id: i64,
        tab_id: i64,
        screenable_tab: crate::models::ScreenableTab,
    ) -> Result<crate::models::ScreenableTab, Error>;
}

impl ScreensApi for ScreensApiClient {
    fn add_field_to_default_screen_post(&self, field_id: &str) -> Result<serde_json::Value, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/screens/addToDefault/{fieldId}",
            configuration.base_path,
            fieldId = crate::apis::urlencode(field_id)
        );
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn add_screen_tab_field_post(
        &self,
        screen_id: i64,
        tab_id: i64,
        add_field_bean: crate::models::AddFieldBean,
    ) -> Result<crate::models::ScreenableField, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/screens/{screenId}/tabs/{tabId}/fields",
            configuration.base_path,
            screenId = screen_id,
            tabId = tab_id
        );
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&add_field_bean);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn add_screen_tab_post(
        &self,
        screen_id: i64,
        screenable_tab: crate::models::ScreenableTab,
    ) -> Result<crate::models::ScreenableTab, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/screens/{screenId}/tabs",
            configuration.base_path,
            screenId = screen_id
        );
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&screenable_tab);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_screen_tab(&self, screen_id: i64, tab_id: i64) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/screens/{screenId}/tabs/{tabId}",
            configuration.base_path,
            screenId = screen_id,
            tabId = tab_id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn get_all_screen_schemes(
        &self,
        start_at: Option<i64>,
        max_results: Option<i32>,
    ) -> Result<crate::models::PageBeanScreenScheme, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/screenscheme", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_all_screen_tab_fields(
        &self,
        screen_id: i64,
        tab_id: i64,
        project_key: Option<&str>,
    ) -> Result<Vec<crate::models::ScreenableField>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/screens/{screenId}/tabs/{tabId}/fields",
            configuration.base_path,
            screenId = screen_id,
            tabId = tab_id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = project_key {
            req_builder = req_builder.query(&[("projectKey", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_all_screen_tabs(
        &self,
        screen_id: i64,
        project_key: Option<&str>,
    ) -> Result<Vec<crate::models::ScreenableTab>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/screens/{screenId}/tabs",
            configuration.base_path,
            screenId = screen_id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = project_key {
            req_builder = req_builder.query(&[("projectKey", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_all_screens(
        &self,
        start_at: Option<i64>,
        max_results: Option<i32>,
    ) -> Result<crate::models::PageBeanScreen, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/screens", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_available_screen_fields(
        &self,
        screen_id: i64,
    ) -> Result<Vec<crate::models::ScreenableField>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/screens/{screenId}/availableFields",
            configuration.base_path,
            screenId = screen_id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_issue_type_screen_scheme_mappings(
        &self,
        start_at: Option<i64>,
        max_results: Option<i32>,
        issue_type_screen_scheme_id: Option<Vec<i64>>,
    ) -> Result<crate::models::PageBeanIssueTypeScreenSchemeItem, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/issuetypescreenscheme/mapping",
            configuration.base_path
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref s) = issue_type_screen_scheme_id {
            req_builder = req_builder.query(&[(
                "issueTypeScreenSchemeId",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_issue_type_screen_scheme_project_associations(
        &self,
        start_at: Option<i64>,
        max_results: Option<i32>,
        project_id: Option<Vec<i64>>,
    ) -> Result<crate::models::PageBeanIssueTypeScreenSchemesProjects, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/issuetypescreenscheme/project",
            configuration.base_path
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref s) = project_id {
            req_builder = req_builder.query(&[(
                "projectId",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_screens_for_field(
        &self,
        field_id: &str,
        start_at: Option<i64>,
        max_results: Option<i32>,
    ) -> Result<crate::models::PageBeanScreen, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/field/{fieldId}/screens",
            configuration.base_path,
            fieldId = crate::apis::urlencode(field_id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn move_screen_tab_field_post(
        &self,
        screen_id: i64,
        tab_id: i64,
        id: &str,
        move_field_bean: crate::models::MoveFieldBean,
    ) -> Result<serde_json::Value, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move",
            configuration.base_path,
            screenId = screen_id,
            tabId = tab_id,
            id = crate::apis::urlencode(id)
        );
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&move_field_bean);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn move_screen_tab_post(
        &self,
        screen_id: i64,
        tab_id: i64,
        pos: i32,
    ) -> Result<serde_json::Value, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}",
            configuration.base_path,
            screenId = screen_id,
            tabId = tab_id,
            pos = pos
        );
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn remove_screen_tab_field_delete(
        &self,
        screen_id: i64,
        tab_id: i64,
        id: &str,
    ) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}",
            configuration.base_path,
            screenId = screen_id,
            tabId = tab_id,
            id = crate::apis::urlencode(id)
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn rename_screen_tab_put(
        &self,
        screen_id: i64,
        tab_id: i64,
        screenable_tab: crate::models::ScreenableTab,
    ) -> Result<crate::models::ScreenableTab, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/screens/{screenId}/tabs/{tabId}",
            configuration.base_path,
            screenId = screen_id,
            tabId = tab_id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&screenable_tab);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
