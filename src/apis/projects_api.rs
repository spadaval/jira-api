/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct ProjectsApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl ProjectsApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> ProjectsApiClient {
        ProjectsApiClient { configuration }
    }
}

pub trait ProjectsApi {
    fn create_project_post(
        &self,
        project_input_bean: crate::models::ProjectInputBean,
    ) -> Result<crate::models::ProjectIdentifiers, Error>;
    fn delete_project(
        &self,
        project_id_or_key: &str,
        enable_undo: Option<bool>,
    ) -> Result<(), Error>;
    fn get_all_projects(
        &self,
        expand: Option<&str>,
        recent: Option<i32>,
        properties: Option<Vec<String>>,
    ) -> Result<Vec<crate::models::Project>, Error>;
    fn get_all_statuses(
        &self,
        project_id_or_key: &str,
    ) -> Result<Vec<crate::models::IssueTypeWithStatus>, Error>;
    fn get_hierarchy(
        &self,
        project_id: i64,
    ) -> Result<crate::models::ProjectIssueTypeHierarchy, Error>;
    fn get_notification_scheme(
        &self,
        project_key_or_id: &str,
        expand: Option<&str>,
    ) -> Result<crate::models::NotificationScheme, Error>;
    fn get_project(
        &self,
        project_id_or_key: &str,
        expand: Option<&str>,
        properties: Option<Vec<String>>,
    ) -> Result<crate::models::Project, Error>;
    fn search_projects_get(
        &self,
        start_at: Option<i64>,
        max_results: Option<i32>,
        order_by: Option<&str>,
        query: Option<&str>,
        type_key: Option<&str>,
        category_id: Option<i64>,
        search_by: Option<&str>,
        action: Option<&str>,
        expand: Option<&str>,
        status: Option<Vec<String>>,
    ) -> Result<crate::models::PageBeanProject, Error>;
    fn update_project_put(
        &self,
        project_id_or_key: &str,
        project_input_bean: crate::models::ProjectInputBean,
        expand: Option<&str>,
    ) -> Result<crate::models::Project, Error>;
    fn update_project_type_put(
        &self,
        project_id_or_key: &str,
        new_project_type_key: &str,
    ) -> Result<crate::models::Project, Error>;
}

impl ProjectsApi for ProjectsApiClient {
    fn create_project_post(
        &self,
        project_input_bean: crate::models::ProjectInputBean,
    ) -> Result<crate::models::ProjectIdentifiers, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/project", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&project_input_bean);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_project(
        &self,
        project_id_or_key: &str,
        enable_undo: Option<bool>,
    ) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/project/{projectIdOrKey}",
            configuration.base_path,
            projectIdOrKey = crate::apis::urlencode(project_id_or_key)
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref s) = enable_undo {
            req_builder = req_builder.query(&[("enableUndo", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn get_all_projects(
        &self,
        expand: Option<&str>,
        recent: Option<i32>,
        properties: Option<Vec<String>>,
    ) -> Result<Vec<crate::models::Project>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/project", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref s) = recent {
            req_builder = req_builder.query(&[("recent", &s.to_string())]);
        }
        if let Some(ref s) = properties {
            req_builder = req_builder.query(&[(
                "properties",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_all_statuses(
        &self,
        project_id_or_key: &str,
    ) -> Result<Vec<crate::models::IssueTypeWithStatus>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/project/{projectIdOrKey}/statuses",
            configuration.base_path,
            projectIdOrKey = crate::apis::urlencode(project_id_or_key)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_hierarchy(
        &self,
        project_id: i64,
    ) -> Result<crate::models::ProjectIssueTypeHierarchy, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/project/{projectId}/hierarchy",
            configuration.base_path,
            projectId = project_id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_notification_scheme(
        &self,
        project_key_or_id: &str,
        expand: Option<&str>,
    ) -> Result<crate::models::NotificationScheme, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/project/{projectKeyOrId}/notificationscheme",
            configuration.base_path,
            projectKeyOrId = crate::apis::urlencode(project_key_or_id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_project(
        &self,
        project_id_or_key: &str,
        expand: Option<&str>,
        properties: Option<Vec<String>>,
    ) -> Result<crate::models::Project, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/project/{projectIdOrKey}",
            configuration.base_path,
            projectIdOrKey = crate::apis::urlencode(project_id_or_key)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref s) = properties {
            req_builder = req_builder.query(&[(
                "properties",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn search_projects_get(
        &self,
        start_at: Option<i64>,
        max_results: Option<i32>,
        order_by: Option<&str>,
        query: Option<&str>,
        type_key: Option<&str>,
        category_id: Option<i64>,
        search_by: Option<&str>,
        action: Option<&str>,
        expand: Option<&str>,
        status: Option<Vec<String>>,
    ) -> Result<crate::models::PageBeanProject, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/project/search", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref s) = order_by {
            req_builder = req_builder.query(&[("orderBy", &s.to_string())]);
        }
        if let Some(ref s) = query {
            req_builder = req_builder.query(&[("query", &s.to_string())]);
        }
        if let Some(ref s) = type_key {
            req_builder = req_builder.query(&[("typeKey", &s.to_string())]);
        }
        if let Some(ref s) = category_id {
            req_builder = req_builder.query(&[("categoryId", &s.to_string())]);
        }
        if let Some(ref s) = search_by {
            req_builder = req_builder.query(&[("searchBy", &s.to_string())]);
        }
        if let Some(ref s) = action {
            req_builder = req_builder.query(&[("action", &s.to_string())]);
        }
        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref s) = status {
            req_builder = req_builder.query(&[(
                "status",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn update_project_put(
        &self,
        project_id_or_key: &str,
        project_input_bean: crate::models::ProjectInputBean,
        expand: Option<&str>,
    ) -> Result<crate::models::Project, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/project/{projectIdOrKey}",
            configuration.base_path,
            projectIdOrKey = crate::apis::urlencode(project_id_or_key)
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&project_input_bean);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn update_project_type_put(
        &self,
        project_id_or_key: &str,
        new_project_type_key: &str,
    ) -> Result<crate::models::Project, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/project/{projectIdOrKey}/type/{newProjectTypeKey}",
            configuration.base_path,
            projectIdOrKey = crate::apis::urlencode(project_id_or_key),
            newProjectTypeKey = crate::apis::urlencode(new_project_type_key)
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
