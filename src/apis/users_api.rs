/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct UsersApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl UsersApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> UsersApiClient {
        UsersApiClient { configuration }
    }
}

pub trait UsersApi {
    fn bulk_get_users_get(
        &self,
        account_id: Vec<String>,
        start_at: Option<i64>,
        max_results: Option<i32>,
        username: Option<Vec<String>>,
        key: Option<Vec<String>>,
    ) -> Result<crate::models::PageBeanUser, Error>;
    fn bulk_get_users_migration_get(
        &self,
        start_at: Option<i64>,
        max_results: Option<i32>,
        username: Option<Vec<String>>,
        key: Option<Vec<String>>,
    ) -> Result<Vec<crate::models::UserMigrationBean>, Error>;
    fn create_user_post(
        &self,
        request_body: ::std::collections::HashMap<String, serde_json::Value>,
    ) -> Result<crate::models::User, Error>;
    fn get_all_users(
        &self,
        start_at: Option<i32>,
        max_results: Option<i32>,
    ) -> Result<Vec<crate::models::User>, Error>;
    fn get_all_users_default(
        &self,
        start_at: Option<i32>,
        max_results: Option<i32>,
    ) -> Result<Vec<crate::models::User>, Error>;
    fn get_user(
        &self,
        account_id: Option<&str>,
        username: Option<&str>,
        key: Option<&str>,
        expand: Option<&str>,
    ) -> Result<crate::models::User, Error>;
    fn get_user_default_columns(
        &self,
        account_id: Option<&str>,
        username: Option<&str>,
    ) -> Result<Vec<crate::models::ColumnItem>, Error>;
    fn get_user_email(
        &self,
        account_id: &str,
    ) -> Result<crate::models::UnrestrictedUserEmail, Error>;
    fn get_user_email_bulk(
        &self,
        account_id: Vec<String>,
    ) -> Result<crate::models::UnrestrictedUserEmail, Error>;
    fn get_user_groups(
        &self,
        account_id: &str,
        username: Option<&str>,
        key: Option<&str>,
    ) -> Result<Vec<crate::models::GroupName>, Error>;
    fn remove_user_delete(
        &self,
        account_id: &str,
        username: Option<&str>,
        key: Option<&str>,
    ) -> Result<(), Error>;
    fn reset_user_columns_delete(
        &self,
        account_id: Option<&str>,
        username: Option<&str>,
    ) -> Result<(), Error>;
    fn set_user_columns_put(
        &self,
        account_id: Option<&str>,
        request_body: Option<Vec<String>>,
    ) -> Result<serde_json::Value, Error>;
}

impl UsersApi for UsersApiClient {
    fn bulk_get_users_get(
        &self,
        account_id: Vec<String>,
        start_at: Option<i64>,
        max_results: Option<i32>,
        username: Option<Vec<String>>,
        key: Option<Vec<String>>,
    ) -> Result<crate::models::PageBeanUser, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/user/bulk", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref s) = username {
            req_builder = req_builder.query(&[(
                "username",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref s) = key {
            req_builder = req_builder.query(&[(
                "key",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        req_builder = req_builder.query(&[(
            "accountId",
            &account_id
                .into_iter()
                .map(|p| p.to_string())
                .collect::<Vec<String>>()
                .join(",")
                .to_string(),
        )]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn bulk_get_users_migration_get(
        &self,
        start_at: Option<i64>,
        max_results: Option<i32>,
        username: Option<Vec<String>>,
        key: Option<Vec<String>>,
    ) -> Result<Vec<crate::models::UserMigrationBean>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/user/bulk/migration", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref s) = username {
            req_builder = req_builder.query(&[(
                "username",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref s) = key {
            req_builder = req_builder.query(&[(
                "key",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn create_user_post(
        &self,
        request_body: ::std::collections::HashMap<String, serde_json::Value>,
    ) -> Result<crate::models::User, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/user", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&request_body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_all_users(
        &self,
        start_at: Option<i32>,
        max_results: Option<i32>,
    ) -> Result<Vec<crate::models::User>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/users/search", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_all_users_default(
        &self,
        start_at: Option<i32>,
        max_results: Option<i32>,
    ) -> Result<Vec<crate::models::User>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/users", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_user(
        &self,
        account_id: Option<&str>,
        username: Option<&str>,
        key: Option<&str>,
        expand: Option<&str>,
    ) -> Result<crate::models::User, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/user", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = account_id {
            req_builder = req_builder.query(&[("accountId", &s.to_string())]);
        }
        if let Some(ref s) = username {
            req_builder = req_builder.query(&[("username", &s.to_string())]);
        }
        if let Some(ref s) = key {
            req_builder = req_builder.query(&[("key", &s.to_string())]);
        }
        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_user_default_columns(
        &self,
        account_id: Option<&str>,
        username: Option<&str>,
    ) -> Result<Vec<crate::models::ColumnItem>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/user/columns", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = account_id {
            req_builder = req_builder.query(&[("accountId", &s.to_string())]);
        }
        if let Some(ref s) = username {
            req_builder = req_builder.query(&[("username", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_user_email(
        &self,
        account_id: &str,
    ) -> Result<crate::models::UnrestrictedUserEmail, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/user/email", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("accountId", &account_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_user_email_bulk(
        &self,
        account_id: Vec<String>,
    ) -> Result<crate::models::UnrestrictedUserEmail, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/user/email/bulk", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[(
            "accountId",
            &account_id
                .into_iter()
                .map(|p| p.to_string())
                .collect::<Vec<String>>()
                .join(",")
                .to_string(),
        )]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_user_groups(
        &self,
        account_id: &str,
        username: Option<&str>,
        key: Option<&str>,
    ) -> Result<Vec<crate::models::GroupName>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/user/groups", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("accountId", &account_id.to_string())]);
        if let Some(ref s) = username {
            req_builder = req_builder.query(&[("username", &s.to_string())]);
        }
        if let Some(ref s) = key {
            req_builder = req_builder.query(&[("key", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn remove_user_delete(
        &self,
        account_id: &str,
        username: Option<&str>,
        key: Option<&str>,
    ) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/user", configuration.base_path);
        let mut req_builder = client.delete(uri_str.as_str());

        req_builder = req_builder.query(&[("accountId", &account_id.to_string())]);
        if let Some(ref s) = username {
            req_builder = req_builder.query(&[("username", &s.to_string())]);
        }
        if let Some(ref s) = key {
            req_builder = req_builder.query(&[("key", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn reset_user_columns_delete(
        &self,
        account_id: Option<&str>,
        username: Option<&str>,
    ) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/user/columns", configuration.base_path);
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref s) = account_id {
            req_builder = req_builder.query(&[("accountId", &s.to_string())]);
        }
        if let Some(ref s) = username {
            req_builder = req_builder.query(&[("username", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn set_user_columns_put(
        &self,
        account_id: Option<&str>,
        request_body: Option<Vec<String>>,
    ) -> Result<serde_json::Value, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/user/columns", configuration.base_path);
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref s) = account_id {
            req_builder = req_builder.query(&[("accountId", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&request_body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
