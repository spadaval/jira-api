/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct UserSearchApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl UserSearchApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> UserSearchApiClient {
        UserSearchApiClient { configuration }
    }
}

pub trait UserSearchApi {
    fn find_assignable_users_get(
        &self,
        query: Option<&str>,
        session_id: Option<&str>,
        username: Option<&str>,
        account_id: Option<&str>,
        project: Option<&str>,
        issue_key: Option<&str>,
        start_at: Option<i32>,
        max_results: Option<i32>,
        action_descriptor_id: Option<i32>,
        recommend: Option<bool>,
    ) -> Result<Vec<crate::models::User>, Error>;
    fn find_bulk_assignable_users_get(
        &self,
        project_keys: &str,
        query: Option<&str>,
        username: Option<&str>,
        account_id: Option<&str>,
        start_at: Option<i32>,
        max_results: Option<i32>,
    ) -> Result<Vec<crate::models::User>, Error>;
    fn find_user_keys_by_query_get(
        &self,
        query: &str,
        start_at: Option<i64>,
        max_results: Option<i32>,
    ) -> Result<crate::models::PageBeanUserKey, Error>;
    fn find_users_by_query_get(
        &self,
        query: &str,
        start_at: Option<i64>,
        max_results: Option<i32>,
    ) -> Result<crate::models::PageBeanUser, Error>;
    fn find_users_for_picker_get(
        &self,
        query: &str,
        max_results: Option<i32>,
        show_avatar: Option<bool>,
        exclude: Option<Vec<String>>,
        exclude_account_ids: Option<Vec<String>>,
        avatar_size: Option<&str>,
        exclude_connect_users: Option<bool>,
    ) -> Result<crate::models::FoundUsers, Error>;
    fn find_users_get(
        &self,
        query: Option<&str>,
        username: Option<&str>,
        account_id: Option<&str>,
        start_at: Option<i32>,
        max_results: Option<i32>,
        property: Option<&str>,
    ) -> Result<Vec<crate::models::User>, Error>;
    fn find_users_with_all_permissions_get(
        &self,
        permissions: &str,
        query: Option<&str>,
        username: Option<&str>,
        account_id: Option<&str>,
        issue_key: Option<&str>,
        project_key: Option<&str>,
        start_at: Option<i32>,
        max_results: Option<i32>,
    ) -> Result<Vec<crate::models::User>, Error>;
    fn find_users_with_browse_permission_get(
        &self,
        query: Option<&str>,
        username: Option<&str>,
        account_id: Option<&str>,
        issue_key: Option<&str>,
        project_key: Option<&str>,
        start_at: Option<i32>,
        max_results: Option<i32>,
    ) -> Result<Vec<crate::models::User>, Error>;
}

impl UserSearchApi for UserSearchApiClient {
    fn find_assignable_users_get(
        &self,
        query: Option<&str>,
        session_id: Option<&str>,
        username: Option<&str>,
        account_id: Option<&str>,
        project: Option<&str>,
        issue_key: Option<&str>,
        start_at: Option<i32>,
        max_results: Option<i32>,
        action_descriptor_id: Option<i32>,
        recommend: Option<bool>,
    ) -> Result<Vec<crate::models::User>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/user/assignable/search",
            configuration.base_path
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = query {
            req_builder = req_builder.query(&[("query", &s.to_string())]);
        }
        if let Some(ref s) = session_id {
            req_builder = req_builder.query(&[("sessionId", &s.to_string())]);
        }
        if let Some(ref s) = username {
            req_builder = req_builder.query(&[("username", &s.to_string())]);
        }
        if let Some(ref s) = account_id {
            req_builder = req_builder.query(&[("accountId", &s.to_string())]);
        }
        if let Some(ref s) = project {
            req_builder = req_builder.query(&[("project", &s.to_string())]);
        }
        if let Some(ref s) = issue_key {
            req_builder = req_builder.query(&[("issueKey", &s.to_string())]);
        }
        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref s) = action_descriptor_id {
            req_builder = req_builder.query(&[("actionDescriptorId", &s.to_string())]);
        }
        if let Some(ref s) = recommend {
            req_builder = req_builder.query(&[("recommend", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn find_bulk_assignable_users_get(
        &self,
        project_keys: &str,
        query: Option<&str>,
        username: Option<&str>,
        account_id: Option<&str>,
        start_at: Option<i32>,
        max_results: Option<i32>,
    ) -> Result<Vec<crate::models::User>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/user/assignable/multiProjectSearch",
            configuration.base_path
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = query {
            req_builder = req_builder.query(&[("query", &s.to_string())]);
        }
        if let Some(ref s) = username {
            req_builder = req_builder.query(&[("username", &s.to_string())]);
        }
        if let Some(ref s) = account_id {
            req_builder = req_builder.query(&[("accountId", &s.to_string())]);
        }
        req_builder = req_builder.query(&[("projectKeys", &project_keys.to_string())]);
        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn find_user_keys_by_query_get(
        &self,
        query: &str,
        start_at: Option<i64>,
        max_results: Option<i32>,
    ) -> Result<crate::models::PageBeanUserKey, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/user/search/query/key",
            configuration.base_path
        );
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("query", &query.to_string())]);
        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn find_users_by_query_get(
        &self,
        query: &str,
        start_at: Option<i64>,
        max_results: Option<i32>,
    ) -> Result<crate::models::PageBeanUser, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/user/search/query", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("query", &query.to_string())]);
        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn find_users_for_picker_get(
        &self,
        query: &str,
        max_results: Option<i32>,
        show_avatar: Option<bool>,
        exclude: Option<Vec<String>>,
        exclude_account_ids: Option<Vec<String>>,
        avatar_size: Option<&str>,
        exclude_connect_users: Option<bool>,
    ) -> Result<crate::models::FoundUsers, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/user/picker", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("query", &query.to_string())]);
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref s) = show_avatar {
            req_builder = req_builder.query(&[("showAvatar", &s.to_string())]);
        }
        if let Some(ref s) = exclude {
            req_builder = req_builder.query(&[(
                "exclude",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref s) = exclude_account_ids {
            req_builder = req_builder.query(&[(
                "excludeAccountIds",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref s) = avatar_size {
            req_builder = req_builder.query(&[("avatarSize", &s.to_string())]);
        }
        if let Some(ref s) = exclude_connect_users {
            req_builder = req_builder.query(&[("excludeConnectUsers", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn find_users_get(
        &self,
        query: Option<&str>,
        username: Option<&str>,
        account_id: Option<&str>,
        start_at: Option<i32>,
        max_results: Option<i32>,
        property: Option<&str>,
    ) -> Result<Vec<crate::models::User>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/user/search", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = query {
            req_builder = req_builder.query(&[("query", &s.to_string())]);
        }
        if let Some(ref s) = username {
            req_builder = req_builder.query(&[("username", &s.to_string())]);
        }
        if let Some(ref s) = account_id {
            req_builder = req_builder.query(&[("accountId", &s.to_string())]);
        }
        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref s) = property {
            req_builder = req_builder.query(&[("property", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn find_users_with_all_permissions_get(
        &self,
        permissions: &str,
        query: Option<&str>,
        username: Option<&str>,
        account_id: Option<&str>,
        issue_key: Option<&str>,
        project_key: Option<&str>,
        start_at: Option<i32>,
        max_results: Option<i32>,
    ) -> Result<Vec<crate::models::User>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/user/permission/search",
            configuration.base_path
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = query {
            req_builder = req_builder.query(&[("query", &s.to_string())]);
        }
        if let Some(ref s) = username {
            req_builder = req_builder.query(&[("username", &s.to_string())]);
        }
        if let Some(ref s) = account_id {
            req_builder = req_builder.query(&[("accountId", &s.to_string())]);
        }
        req_builder = req_builder.query(&[("permissions", &permissions.to_string())]);
        if let Some(ref s) = issue_key {
            req_builder = req_builder.query(&[("issueKey", &s.to_string())]);
        }
        if let Some(ref s) = project_key {
            req_builder = req_builder.query(&[("projectKey", &s.to_string())]);
        }
        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn find_users_with_browse_permission_get(
        &self,
        query: Option<&str>,
        username: Option<&str>,
        account_id: Option<&str>,
        issue_key: Option<&str>,
        project_key: Option<&str>,
        start_at: Option<i32>,
        max_results: Option<i32>,
    ) -> Result<Vec<crate::models::User>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/user/viewissue/search",
            configuration.base_path
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = query {
            req_builder = req_builder.query(&[("query", &s.to_string())]);
        }
        if let Some(ref s) = username {
            req_builder = req_builder.query(&[("username", &s.to_string())]);
        }
        if let Some(ref s) = account_id {
            req_builder = req_builder.query(&[("accountId", &s.to_string())]);
        }
        if let Some(ref s) = issue_key {
            req_builder = req_builder.query(&[("issueKey", &s.to_string())]);
        }
        if let Some(ref s) = project_key {
            req_builder = req_builder.query(&[("projectKey", &s.to_string())]);
        }
        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
