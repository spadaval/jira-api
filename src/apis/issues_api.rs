/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct IssuesApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl IssuesApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> IssuesApiClient {
        IssuesApiClient { configuration }
    }
}

pub trait IssuesApi {
    fn assign_issue_put(
        &self,
        issue_id_or_key: &str,
        user: crate::models::User,
    ) -> Result<serde_json::Value, Error>;
    fn create_issue_post(
        &self,
        request_body: ::std::collections::HashMap<String, serde_json::Value>,
        update_history: Option<bool>,
    ) -> Result<crate::models::CreatedIssue, Error>;
    fn create_issues_post(
        &self,
        request_body: ::std::collections::HashMap<String, serde_json::Value>,
    ) -> Result<crate::models::CreatedIssues, Error>;
    fn delete_issue(
        &self,
        issue_id_or_key: &str,
        delete_subtasks: Option<&str>,
    ) -> Result<(), Error>;
    fn do_transition_post(
        &self,
        issue_id_or_key: &str,
        request_body: ::std::collections::HashMap<String, serde_json::Value>,
    ) -> Result<serde_json::Value, Error>;
    fn edit_issue_put(
        &self,
        issue_id_or_key: &str,
        request_body: ::std::collections::HashMap<String, serde_json::Value>,
        notify_users: Option<bool>,
        override_screen_security: Option<bool>,
        override_editable_flag: Option<bool>,
    ) -> Result<serde_json::Value, Error>;
    fn get_change_logs(
        &self,
        issue_id_or_key: &str,
        start_at: Option<i32>,
        max_results: Option<i32>,
    ) -> Result<crate::models::PageBeanChangelog, Error>;
    fn get_create_issue_meta(
        &self,
        project_ids: Option<Vec<String>>,
        project_keys: Option<Vec<String>>,
        issuetype_ids: Option<Vec<String>>,
        issuetype_names: Option<Vec<String>>,
        expand: Option<&str>,
    ) -> Result<crate::models::IssueCreateMetadata, Error>;
    fn get_edit_issue_meta(
        &self,
        issue_id_or_key: &str,
        override_screen_security: Option<bool>,
        override_editable_flag: Option<bool>,
    ) -> Result<crate::models::IssueUpdateMetadata, Error>;
    fn get_issue(
        &self,
        issue_id_or_key: &str,
        fields: Option<Vec<String>>,
        fields_by_keys: Option<bool>,
        expand: Option<&str>,
        properties: Option<Vec<String>>,
        update_history: Option<bool>,
    ) -> Result<crate::models::IssueBean, Error>;
    fn get_transitions(
        &self,
        issue_id_or_key: &str,
        expand: Option<&str>,
        transition_id: Option<&str>,
        skip_remote_only_condition: Option<bool>,
        include_unavailable_transitions: Option<bool>,
    ) -> Result<crate::models::Transitions, Error>;
    fn notify_post(
        &self,
        issue_id_or_key: &str,
        request_body: ::std::collections::HashMap<String, serde_json::Value>,
    ) -> Result<serde_json::Value, Error>;
}

impl IssuesApi for IssuesApiClient {
    fn assign_issue_put(
        &self,
        issue_id_or_key: &str,
        user: crate::models::User,
    ) -> Result<serde_json::Value, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/issue/{issueIdOrKey}/assignee",
            configuration.base_path,
            issueIdOrKey = crate::apis::urlencode(issue_id_or_key)
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&user);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn create_issue_post(
        &self,
        request_body: ::std::collections::HashMap<String, serde_json::Value>,
        update_history: Option<bool>,
    ) -> Result<crate::models::CreatedIssue, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/issue", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref s) = update_history {
            req_builder = req_builder.query(&[("updateHistory", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&request_body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn create_issues_post(
        &self,
        request_body: ::std::collections::HashMap<String, serde_json::Value>,
    ) -> Result<crate::models::CreatedIssues, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/issue/bulk", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&request_body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_issue(
        &self,
        issue_id_or_key: &str,
        delete_subtasks: Option<&str>,
    ) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/issue/{issueIdOrKey}",
            configuration.base_path,
            issueIdOrKey = crate::apis::urlencode(issue_id_or_key)
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref s) = delete_subtasks {
            req_builder = req_builder.query(&[("deleteSubtasks", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn do_transition_post(
        &self,
        issue_id_or_key: &str,
        request_body: ::std::collections::HashMap<String, serde_json::Value>,
    ) -> Result<serde_json::Value, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/issue/{issueIdOrKey}/transitions",
            configuration.base_path,
            issueIdOrKey = crate::apis::urlencode(issue_id_or_key)
        );
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&request_body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn edit_issue_put(
        &self,
        issue_id_or_key: &str,
        request_body: ::std::collections::HashMap<String, serde_json::Value>,
        notify_users: Option<bool>,
        override_screen_security: Option<bool>,
        override_editable_flag: Option<bool>,
    ) -> Result<serde_json::Value, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/issue/{issueIdOrKey}",
            configuration.base_path,
            issueIdOrKey = crate::apis::urlencode(issue_id_or_key)
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref s) = notify_users {
            req_builder = req_builder.query(&[("notifyUsers", &s.to_string())]);
        }
        if let Some(ref s) = override_screen_security {
            req_builder = req_builder.query(&[("overrideScreenSecurity", &s.to_string())]);
        }
        if let Some(ref s) = override_editable_flag {
            req_builder = req_builder.query(&[("overrideEditableFlag", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&request_body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_change_logs(
        &self,
        issue_id_or_key: &str,
        start_at: Option<i32>,
        max_results: Option<i32>,
    ) -> Result<crate::models::PageBeanChangelog, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/issue/{issueIdOrKey}/changelog",
            configuration.base_path,
            issueIdOrKey = crate::apis::urlencode(issue_id_or_key)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_create_issue_meta(
        &self,
        project_ids: Option<Vec<String>>,
        project_keys: Option<Vec<String>>,
        issuetype_ids: Option<Vec<String>>,
        issuetype_names: Option<Vec<String>>,
        expand: Option<&str>,
    ) -> Result<crate::models::IssueCreateMetadata, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/issue/createmeta", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = project_ids {
            req_builder = req_builder.query(&[(
                "projectIds",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref s) = project_keys {
            req_builder = req_builder.query(&[(
                "projectKeys",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref s) = issuetype_ids {
            req_builder = req_builder.query(&[(
                "issuetypeIds",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref s) = issuetype_names {
            req_builder = req_builder.query(&[(
                "issuetypeNames",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_edit_issue_meta(
        &self,
        issue_id_or_key: &str,
        override_screen_security: Option<bool>,
        override_editable_flag: Option<bool>,
    ) -> Result<crate::models::IssueUpdateMetadata, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/issue/{issueIdOrKey}/editmeta",
            configuration.base_path,
            issueIdOrKey = crate::apis::urlencode(issue_id_or_key)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = override_screen_security {
            req_builder = req_builder.query(&[("overrideScreenSecurity", &s.to_string())]);
        }
        if let Some(ref s) = override_editable_flag {
            req_builder = req_builder.query(&[("overrideEditableFlag", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_issue(
        &self,
        issue_id_or_key: &str,
        fields: Option<Vec<String>>,
        fields_by_keys: Option<bool>,
        expand: Option<&str>,
        properties: Option<Vec<String>>,
        update_history: Option<bool>,
    ) -> Result<crate::models::IssueBean, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/issue/{issueIdOrKey}",
            configuration.base_path,
            issueIdOrKey = crate::apis::urlencode(issue_id_or_key)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = fields {
            req_builder = req_builder.query(&[(
                "fields",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref s) = fields_by_keys {
            req_builder = req_builder.query(&[("fieldsByKeys", &s.to_string())]);
        }
        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref s) = properties {
            req_builder = req_builder.query(&[(
                "properties",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref s) = update_history {
            req_builder = req_builder.query(&[("updateHistory", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_transitions(
        &self,
        issue_id_or_key: &str,
        expand: Option<&str>,
        transition_id: Option<&str>,
        skip_remote_only_condition: Option<bool>,
        include_unavailable_transitions: Option<bool>,
    ) -> Result<crate::models::Transitions, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/issue/{issueIdOrKey}/transitions",
            configuration.base_path,
            issueIdOrKey = crate::apis::urlencode(issue_id_or_key)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref s) = transition_id {
            req_builder = req_builder.query(&[("transitionId", &s.to_string())]);
        }
        if let Some(ref s) = skip_remote_only_condition {
            req_builder = req_builder.query(&[("skipRemoteOnlyCondition", &s.to_string())]);
        }
        if let Some(ref s) = include_unavailable_transitions {
            req_builder = req_builder.query(&[("includeUnavailableTransitions", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn notify_post(
        &self,
        issue_id_or_key: &str,
        request_body: ::std::collections::HashMap<String, serde_json::Value>,
    ) -> Result<serde_json::Value, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/issue/{issueIdOrKey}/notify",
            configuration.base_path,
            issueIdOrKey = crate::apis::urlencode(issue_id_or_key)
        );
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&request_body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
