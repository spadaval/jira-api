/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct GroupsApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl GroupsApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> GroupsApiClient {
        GroupsApiClient { configuration }
    }
}

pub trait GroupsApi {
    fn add_user_to_group_post(
        &self,
        groupname: &str,
        request_body: ::std::collections::HashMap<String, serde_json::Value>,
    ) -> Result<crate::models::Group, Error>;
    fn create_group_post(
        &self,
        request_body: ::std::collections::HashMap<String, serde_json::Value>,
    ) -> Result<crate::models::Group, Error>;
    fn find_groups_get(
        &self,
        account_id: Option<&str>,
        query: Option<&str>,
        exclude: Option<Vec<String>>,
        max_results: Option<i32>,
        user_name: Option<&str>,
    ) -> Result<crate::models::FoundGroups, Error>;
    fn get_group(
        &self,
        groupname: &str,
        expand: Option<&str>,
    ) -> Result<crate::models::Group, Error>;
    fn get_users_from_group(
        &self,
        groupname: &str,
        include_inactive_users: Option<bool>,
        start_at: Option<i64>,
        max_results: Option<i32>,
    ) -> Result<crate::models::PageBeanUserDetails, Error>;
    fn remove_group_delete(&self, groupname: &str, swap_group: Option<&str>) -> Result<(), Error>;
    fn remove_user_from_group_delete(
        &self,
        groupname: &str,
        account_id: &str,
        username: Option<&str>,
    ) -> Result<(), Error>;
}

impl GroupsApi for GroupsApiClient {
    fn add_user_to_group_post(
        &self,
        groupname: &str,
        request_body: ::std::collections::HashMap<String, serde_json::Value>,
    ) -> Result<crate::models::Group, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/group/user", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        req_builder = req_builder.query(&[("groupname", &groupname.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&request_body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn create_group_post(
        &self,
        request_body: ::std::collections::HashMap<String, serde_json::Value>,
    ) -> Result<crate::models::Group, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/group", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&request_body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn find_groups_get(
        &self,
        account_id: Option<&str>,
        query: Option<&str>,
        exclude: Option<Vec<String>>,
        max_results: Option<i32>,
        user_name: Option<&str>,
    ) -> Result<crate::models::FoundGroups, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/groups/picker", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = account_id {
            req_builder = req_builder.query(&[("accountId", &s.to_string())]);
        }
        if let Some(ref s) = query {
            req_builder = req_builder.query(&[("query", &s.to_string())]);
        }
        if let Some(ref s) = exclude {
            req_builder = req_builder.query(&[(
                "exclude",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref s) = user_name {
            req_builder = req_builder.query(&[("userName", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_group(
        &self,
        groupname: &str,
        expand: Option<&str>,
    ) -> Result<crate::models::Group, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/group", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("groupname", &groupname.to_string())]);
        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_users_from_group(
        &self,
        groupname: &str,
        include_inactive_users: Option<bool>,
        start_at: Option<i64>,
        max_results: Option<i32>,
    ) -> Result<crate::models::PageBeanUserDetails, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/group/member", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("groupname", &groupname.to_string())]);
        if let Some(ref s) = include_inactive_users {
            req_builder = req_builder.query(&[("includeInactiveUsers", &s.to_string())]);
        }
        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn remove_group_delete(&self, groupname: &str, swap_group: Option<&str>) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/group", configuration.base_path);
        let mut req_builder = client.delete(uri_str.as_str());

        req_builder = req_builder.query(&[("groupname", &groupname.to_string())]);
        if let Some(ref s) = swap_group {
            req_builder = req_builder.query(&[("swapGroup", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn remove_user_from_group_delete(
        &self,
        groupname: &str,
        account_id: &str,
        username: Option<&str>,
    ) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/group/user", configuration.base_path);
        let mut req_builder = client.delete(uri_str.as_str());

        req_builder = req_builder.query(&[("groupname", &groupname.to_string())]);
        if let Some(ref s) = username {
            req_builder = req_builder.query(&[("username", &s.to_string())]);
        }
        req_builder = req_builder.query(&[("accountId", &account_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }
}
