/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct FiltersApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl FiltersApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> FiltersApiClient {
        FiltersApiClient { configuration }
    }
}

pub trait FiltersApi {
    fn create_filter_post(
        &self,
        filter: crate::models::Filter,
        expand: Option<&str>,
    ) -> Result<crate::models::Filter, Error>;
    fn delete_favourite_for_filter(
        &self,
        id: i64,
        expand: Option<&str>,
    ) -> Result<crate::models::Filter, Error>;
    fn delete_filter(&self, id: i64) -> Result<(), Error>;
    fn get_columns(&self, id: i64) -> Result<Vec<crate::models::ColumnItem>, Error>;
    fn get_favourite_filters(
        &self,
        expand: Option<&str>,
    ) -> Result<Vec<crate::models::Filter>, Error>;
    fn get_filter(&self, id: i64, expand: Option<&str>) -> Result<crate::models::Filter, Error>;
    fn get_filters(&self, expand: Option<&str>) -> Result<Vec<crate::models::Filter>, Error>;
    fn get_filters_paginated(
        &self,
        filter_name: Option<&str>,
        account_id: Option<&str>,
        owner: Option<&str>,
        groupname: Option<&str>,
        project_id: Option<i64>,
        order_by: Option<&str>,
        start_at: Option<i64>,
        max_results: Option<i32>,
        expand: Option<&str>,
    ) -> Result<crate::models::PageBeanFoundFilter, Error>;
    fn get_my_filters(
        &self,
        expand: Option<&str>,
        include_favourites: Option<bool>,
    ) -> Result<Vec<crate::models::Filter>, Error>;
    fn reset_columns_delete(&self, id: i64) -> Result<(), Error>;
    fn set_columns_put(
        &self,
        id: i64,
        request_body: Option<Vec<String>>,
    ) -> Result<serde_json::Value, Error>;
    fn set_favourite_for_filter_put(
        &self,
        id: i64,
        expand: Option<&str>,
    ) -> Result<crate::models::Filter, Error>;
    fn update_filter_put(
        &self,
        id: i64,
        filter: crate::models::Filter,
        expand: Option<&str>,
    ) -> Result<crate::models::Filter, Error>;
}

impl FiltersApi for FiltersApiClient {
    fn create_filter_post(
        &self,
        filter: crate::models::Filter,
        expand: Option<&str>,
    ) -> Result<crate::models::Filter, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/filter", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&filter);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_favourite_for_filter(
        &self,
        id: i64,
        expand: Option<&str>,
    ) -> Result<crate::models::Filter, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/filter/{id}/favourite",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_filter(&self, id: i64) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/filter/{id}",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn get_columns(&self, id: i64) -> Result<Vec<crate::models::ColumnItem>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/filter/{id}/columns",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_favourite_filters(
        &self,
        expand: Option<&str>,
    ) -> Result<Vec<crate::models::Filter>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/filter/favourite", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_filter(&self, id: i64, expand: Option<&str>) -> Result<crate::models::Filter, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/filter/{id}",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_filters(&self, expand: Option<&str>) -> Result<Vec<crate::models::Filter>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/filter", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_filters_paginated(
        &self,
        filter_name: Option<&str>,
        account_id: Option<&str>,
        owner: Option<&str>,
        groupname: Option<&str>,
        project_id: Option<i64>,
        order_by: Option<&str>,
        start_at: Option<i64>,
        max_results: Option<i32>,
        expand: Option<&str>,
    ) -> Result<crate::models::PageBeanFoundFilter, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/filter/search", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = filter_name {
            req_builder = req_builder.query(&[("filterName", &s.to_string())]);
        }
        if let Some(ref s) = account_id {
            req_builder = req_builder.query(&[("accountId", &s.to_string())]);
        }
        if let Some(ref s) = owner {
            req_builder = req_builder.query(&[("owner", &s.to_string())]);
        }
        if let Some(ref s) = groupname {
            req_builder = req_builder.query(&[("groupname", &s.to_string())]);
        }
        if let Some(ref s) = project_id {
            req_builder = req_builder.query(&[("projectId", &s.to_string())]);
        }
        if let Some(ref s) = order_by {
            req_builder = req_builder.query(&[("orderBy", &s.to_string())]);
        }
        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_my_filters(
        &self,
        expand: Option<&str>,
        include_favourites: Option<bool>,
    ) -> Result<Vec<crate::models::Filter>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/filter/my", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref s) = include_favourites {
            req_builder = req_builder.query(&[("includeFavourites", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn reset_columns_delete(&self, id: i64) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/filter/{id}/columns",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn set_columns_put(
        &self,
        id: i64,
        request_body: Option<Vec<String>>,
    ) -> Result<serde_json::Value, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/filter/{id}/columns",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&request_body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn set_favourite_for_filter_put(
        &self,
        id: i64,
        expand: Option<&str>,
    ) -> Result<crate::models::Filter, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/filter/{id}/favourite",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn update_filter_put(
        &self,
        id: i64,
        filter: crate::models::Filter,
        expand: Option<&str>,
    ) -> Result<crate::models::Filter, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/filter/{id}",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&filter);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
