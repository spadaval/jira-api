/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct WorkflowSchemesApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl WorkflowSchemesApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> WorkflowSchemesApiClient {
        WorkflowSchemesApiClient { configuration }
    }
}

pub trait WorkflowSchemesApi {
    fn create_workflow_scheme_post(
        &self,
        workflow_scheme: crate::models::WorkflowScheme,
    ) -> Result<crate::models::WorkflowScheme, Error>;
    fn delete_default_workflow(
        &self,
        id: i64,
        update_draft_if_needed: Option<bool>,
    ) -> Result<crate::models::WorkflowScheme, Error>;
    fn delete_workflow_mapping(
        &self,
        id: i64,
        workflow_name: &str,
        update_draft_if_needed: Option<bool>,
    ) -> Result<(), Error>;
    fn delete_workflow_scheme(&self, id: i64) -> Result<(), Error>;
    fn delete_workflow_scheme_issue_type(
        &self,
        id: i64,
        issue_type: &str,
        update_draft_if_needed: Option<bool>,
    ) -> Result<crate::models::WorkflowScheme, Error>;
    fn get_all_workflow_schemes(
        &self,
        start_at: Option<i64>,
        max_results: Option<i32>,
    ) -> Result<crate::models::PageBeanWorkflowScheme, Error>;
    fn get_default_workflow(
        &self,
        id: i64,
        return_draft_if_exists: Option<bool>,
    ) -> Result<crate::models::DefaultWorkflow, Error>;
    fn get_workflow(
        &self,
        id: i64,
        workflow_name: Option<&str>,
        return_draft_if_exists: Option<bool>,
    ) -> Result<crate::models::IssueTypesWorkflowMapping, Error>;
    fn get_workflow_scheme(
        &self,
        id: i64,
        return_draft_if_exists: Option<bool>,
    ) -> Result<crate::models::WorkflowScheme, Error>;
    fn get_workflow_scheme_issue_type(
        &self,
        id: i64,
        issue_type: &str,
        return_draft_if_exists: Option<bool>,
    ) -> Result<crate::models::IssueTypeWorkflowMapping, Error>;
    fn set_workflow_scheme_issue_type_put(
        &self,
        id: i64,
        issue_type: &str,
        issue_type_workflow_mapping: crate::models::IssueTypeWorkflowMapping,
    ) -> Result<crate::models::WorkflowScheme, Error>;
    fn update_default_workflow_put(
        &self,
        id: i64,
        default_workflow: crate::models::DefaultWorkflow,
    ) -> Result<crate::models::WorkflowScheme, Error>;
    fn update_workflow_mapping_put(
        &self,
        id: i64,
        workflow_name: &str,
        issue_types_workflow_mapping: crate::models::IssueTypesWorkflowMapping,
    ) -> Result<crate::models::WorkflowScheme, Error>;
    fn update_workflow_scheme_put(
        &self,
        id: i64,
        workflow_scheme: crate::models::WorkflowScheme,
    ) -> Result<crate::models::WorkflowScheme, Error>;
}

impl WorkflowSchemesApi for WorkflowSchemesApiClient {
    fn create_workflow_scheme_post(
        &self,
        workflow_scheme: crate::models::WorkflowScheme,
    ) -> Result<crate::models::WorkflowScheme, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/workflowscheme", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&workflow_scheme);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_default_workflow(
        &self,
        id: i64,
        update_draft_if_needed: Option<bool>,
    ) -> Result<crate::models::WorkflowScheme, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/workflowscheme/{id}/default",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref s) = update_draft_if_needed {
            req_builder = req_builder.query(&[("updateDraftIfNeeded", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_workflow_mapping(
        &self,
        id: i64,
        workflow_name: &str,
        update_draft_if_needed: Option<bool>,
    ) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/workflowscheme/{id}/workflow",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        req_builder = req_builder.query(&[("workflowName", &workflow_name.to_string())]);
        if let Some(ref s) = update_draft_if_needed {
            req_builder = req_builder.query(&[("updateDraftIfNeeded", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn delete_workflow_scheme(&self, id: i64) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/workflowscheme/{id}",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn delete_workflow_scheme_issue_type(
        &self,
        id: i64,
        issue_type: &str,
        update_draft_if_needed: Option<bool>,
    ) -> Result<crate::models::WorkflowScheme, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
            configuration.base_path,
            id = id,
            issueType = crate::apis::urlencode(issue_type)
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref s) = update_draft_if_needed {
            req_builder = req_builder.query(&[("updateDraftIfNeeded", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_all_workflow_schemes(
        &self,
        start_at: Option<i64>,
        max_results: Option<i32>,
    ) -> Result<crate::models::PageBeanWorkflowScheme, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/workflowscheme", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = start_at {
            req_builder = req_builder.query(&[("startAt", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_default_workflow(
        &self,
        id: i64,
        return_draft_if_exists: Option<bool>,
    ) -> Result<crate::models::DefaultWorkflow, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/workflowscheme/{id}/default",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = return_draft_if_exists {
            req_builder = req_builder.query(&[("returnDraftIfExists", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_workflow(
        &self,
        id: i64,
        workflow_name: Option<&str>,
        return_draft_if_exists: Option<bool>,
    ) -> Result<crate::models::IssueTypesWorkflowMapping, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/workflowscheme/{id}/workflow",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = workflow_name {
            req_builder = req_builder.query(&[("workflowName", &s.to_string())]);
        }
        if let Some(ref s) = return_draft_if_exists {
            req_builder = req_builder.query(&[("returnDraftIfExists", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_workflow_scheme(
        &self,
        id: i64,
        return_draft_if_exists: Option<bool>,
    ) -> Result<crate::models::WorkflowScheme, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/workflowscheme/{id}",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = return_draft_if_exists {
            req_builder = req_builder.query(&[("returnDraftIfExists", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_workflow_scheme_issue_type(
        &self,
        id: i64,
        issue_type: &str,
        return_draft_if_exists: Option<bool>,
    ) -> Result<crate::models::IssueTypeWorkflowMapping, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
            configuration.base_path,
            id = id,
            issueType = crate::apis::urlencode(issue_type)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = return_draft_if_exists {
            req_builder = req_builder.query(&[("returnDraftIfExists", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn set_workflow_scheme_issue_type_put(
        &self,
        id: i64,
        issue_type: &str,
        issue_type_workflow_mapping: crate::models::IssueTypeWorkflowMapping,
    ) -> Result<crate::models::WorkflowScheme, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
            configuration.base_path,
            id = id,
            issueType = crate::apis::urlencode(issue_type)
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&issue_type_workflow_mapping);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn update_default_workflow_put(
        &self,
        id: i64,
        default_workflow: crate::models::DefaultWorkflow,
    ) -> Result<crate::models::WorkflowScheme, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/workflowscheme/{id}/default",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&default_workflow);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn update_workflow_mapping_put(
        &self,
        id: i64,
        workflow_name: &str,
        issue_types_workflow_mapping: crate::models::IssueTypesWorkflowMapping,
    ) -> Result<crate::models::WorkflowScheme, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/workflowscheme/{id}/workflow",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        req_builder = req_builder.query(&[("workflowName", &workflow_name.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&issue_types_workflow_mapping);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn update_workflow_scheme_put(
        &self,
        id: i64,
        workflow_scheme: crate::models::WorkflowScheme,
    ) -> Result<crate::models::WorkflowScheme, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/workflowscheme/{id}",
            configuration.base_path,
            id = id
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&workflow_scheme);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
