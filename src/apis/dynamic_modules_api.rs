/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct DynamicModulesApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl DynamicModulesApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> DynamicModulesApiClient {
        DynamicModulesApiClient { configuration }
    }
}

pub trait DynamicModulesApi {
    fn get_modules(
        &self,
    ) -> Result<::std::collections::HashMap<String, Vec<serde_json::Value>>, Error>;
    fn register_modules_post(
        &self,
        request_body: ::std::collections::HashMap<String, Vec<serde_json::Value>>,
    ) -> Result<(), Error>;
    fn remove_modules_delete(&self, module_key: Option<Vec<String>>) -> Result<(), Error>;
}

impl DynamicModulesApi for DynamicModulesApiClient {
    fn get_modules(
        &self,
    ) -> Result<::std::collections::HashMap<String, Vec<serde_json::Value>>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/atlassian-connect/1/app/module/dynamic",
            configuration.base_path
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn register_modules_post(
        &self,
        request_body: ::std::collections::HashMap<String, Vec<serde_json::Value>>,
    ) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/atlassian-connect/1/app/module/dynamic",
            configuration.base_path
        );
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&request_body);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn remove_modules_delete(&self, module_key: Option<Vec<String>>) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/atlassian-connect/1/app/module/dynamic",
            configuration.base_path
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref s) = module_key {
            req_builder = req_builder.query(&[(
                "moduleKey",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }
}
