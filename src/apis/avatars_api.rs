/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct AvatarsApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl AvatarsApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> AvatarsApiClient {
        AvatarsApiClient { configuration }
    }
}

pub trait AvatarsApi {
    fn delete_avatar(&self, _type: &str, owning_object_id: &str, id: i64) -> Result<(), Error>;
    fn get_all_system_avatars(&self, _type: &str) -> Result<crate::models::SystemAvatars, Error>;
    fn get_avatars(&self, _type: &str, entity_id: &str) -> Result<crate::models::Avatars, Error>;
    fn store_avatar_post(
        &self,
        _type: &str,
        entity_id: &str,
        size: i32,
        body: serde_json::Value,
        x: Option<i32>,
        y: Option<i32>,
    ) -> Result<crate::models::Avatar, Error>;
}

impl AvatarsApi for AvatarsApiClient {
    fn delete_avatar(&self, _type: &str, owning_object_id: &str, id: i64) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}", configuration.base_path, type=crate::apis::urlencode(_type), owningObjectId=crate::apis::urlencode(owning_object_id), id=id);
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn get_all_system_avatars(&self, _type: &str) -> Result<crate::models::SystemAvatars, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/avatar/{type}/system", configuration.base_path, type=crate::apis::urlencode(_type));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_avatars(&self, _type: &str, entity_id: &str) -> Result<crate::models::Avatars, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/universal_avatar/type/{type}/owner/{entityId}", configuration.base_path, type=crate::apis::urlencode(_type), entityId=crate::apis::urlencode(entity_id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn store_avatar_post(
        &self,
        _type: &str,
        entity_id: &str,
        size: i32,
        body: serde_json::Value,
        x: Option<i32>,
        y: Option<i32>,
    ) -> Result<crate::models::Avatar, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/universal_avatar/type/{type}/owner/{entityId}", configuration.base_path, type=crate::apis::urlencode(_type), entityId=crate::apis::urlencode(entity_id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref s) = x {
            req_builder = req_builder.query(&[("x", &s.to_string())]);
        }
        if let Some(ref s) = y {
            req_builder = req_builder.query(&[("y", &s.to_string())]);
        }
        req_builder = req_builder.query(&[("size", &size.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
