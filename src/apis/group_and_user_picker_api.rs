/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct GroupAndUserPickerApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl GroupAndUserPickerApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> GroupAndUserPickerApiClient {
        GroupAndUserPickerApiClient { configuration }
    }
}

pub trait GroupAndUserPickerApi {
    fn find_users_and_groups_get(
        &self,
        query: &str,
        max_results: Option<i32>,
        show_avatar: Option<bool>,
        field_id: Option<&str>,
        project_id: Option<Vec<String>>,
        issue_type_id: Option<Vec<String>>,
        avatar_size: Option<&str>,
        case_insensitive: Option<bool>,
        exclude_connect_addons: Option<bool>,
    ) -> Result<crate::models::FoundUsersAndGroups, Error>;
}

impl GroupAndUserPickerApi for GroupAndUserPickerApiClient {
    fn find_users_and_groups_get(
        &self,
        query: &str,
        max_results: Option<i32>,
        show_avatar: Option<bool>,
        field_id: Option<&str>,
        project_id: Option<Vec<String>>,
        issue_type_id: Option<Vec<String>>,
        avatar_size: Option<&str>,
        case_insensitive: Option<bool>,
        exclude_connect_addons: Option<bool>,
    ) -> Result<crate::models::FoundUsersAndGroups, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/groupuserpicker", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("query", &query.to_string())]);
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref s) = show_avatar {
            req_builder = req_builder.query(&[("showAvatar", &s.to_string())]);
        }
        if let Some(ref s) = field_id {
            req_builder = req_builder.query(&[("fieldId", &s.to_string())]);
        }
        if let Some(ref s) = project_id {
            req_builder = req_builder.query(&[(
                "projectId",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref s) = issue_type_id {
            req_builder = req_builder.query(&[(
                "issueTypeId",
                &s.into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]);
        }
        if let Some(ref s) = avatar_size {
            req_builder = req_builder.query(&[("avatarSize", &s.to_string())]);
        }
        if let Some(ref s) = case_insensitive {
            req_builder = req_builder.query(&[("caseInsensitive", &s.to_string())]);
        }
        if let Some(ref s) = exclude_connect_addons {
            req_builder = req_builder.query(&[("excludeConnectAddons", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
