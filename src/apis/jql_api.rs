/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct JQLApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl JQLApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> JQLApiClient {
        JQLApiClient { configuration }
    }
}

pub trait JQLApi {
    fn get_auto_complete(&self) -> Result<crate::models::JqlReferenceData, Error>;
    fn get_field_auto_complete_for_query_string(
        &self,
        field_name: Option<&str>,
        field_value: Option<&str>,
        predicate_name: Option<&str>,
        predicate_value: Option<&str>,
    ) -> Result<crate::models::AutoCompleteSuggestions, Error>;
    fn migrate_queries_post(
        &self,
        jql_personal_data_migration_request: crate::models::JqlPersonalDataMigrationRequest,
    ) -> Result<crate::models::ConvertedJqlQueries, Error>;
    fn parse_jql_queries_post(
        &self,
        jql_queries_to_parse: crate::models::JqlQueriesToParse,
    ) -> Result<crate::models::ParsedJqlQueries, Error>;
}

impl JQLApi for JQLApiClient {
    fn get_auto_complete(&self) -> Result<crate::models::JqlReferenceData, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/jql/autocompletedata",
            configuration.base_path
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_field_auto_complete_for_query_string(
        &self,
        field_name: Option<&str>,
        field_value: Option<&str>,
        predicate_name: Option<&str>,
        predicate_value: Option<&str>,
    ) -> Result<crate::models::AutoCompleteSuggestions, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/jql/autocompletedata/suggestions",
            configuration.base_path
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = field_name {
            req_builder = req_builder.query(&[("fieldName", &s.to_string())]);
        }
        if let Some(ref s) = field_value {
            req_builder = req_builder.query(&[("fieldValue", &s.to_string())]);
        }
        if let Some(ref s) = predicate_name {
            req_builder = req_builder.query(&[("predicateName", &s.to_string())]);
        }
        if let Some(ref s) = predicate_value {
            req_builder = req_builder.query(&[("predicateValue", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn migrate_queries_post(
        &self,
        jql_personal_data_migration_request: crate::models::JqlPersonalDataMigrationRequest,
    ) -> Result<crate::models::ConvertedJqlQueries, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/jql/pdcleaner", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&jql_personal_data_migration_request);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn parse_jql_queries_post(
        &self,
        jql_queries_to_parse: crate::models::JqlQueriesToParse,
    ) -> Result<crate::models::ParsedJqlQueries, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/jql/parse", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&jql_queries_to_parse);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
