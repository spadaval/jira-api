/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct JiraExpressionsApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl JiraExpressionsApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> JiraExpressionsApiClient {
        JiraExpressionsApiClient { configuration }
    }
}

pub trait JiraExpressionsApi {
    fn analyse_expression_post(
        &self,
        jira_expression_for_analysis: crate::models::JiraExpressionForAnalysis,
    ) -> Result<crate::models::JiraExpressionsAnalysis, Error>;
    fn evaluate_jira_expression_post(
        &self,
        jira_expression_eval_request_bean: crate::models::JiraExpressionEvalRequestBean,
        expand: Option<&str>,
    ) -> Result<crate::models::JiraExpressionResult, Error>;
}

impl JiraExpressionsApi for JiraExpressionsApiClient {
    fn analyse_expression_post(
        &self,
        jira_expression_for_analysis: crate::models::JiraExpressionForAnalysis,
    ) -> Result<crate::models::JiraExpressionsAnalysis, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/expression/analyse", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&jira_expression_for_analysis);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn evaluate_jira_expression_post(
        &self,
        jira_expression_eval_request_bean: crate::models::JiraExpressionEvalRequestBean,
        expand: Option<&str>,
    ) -> Result<crate::models::JiraExpressionResult, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/expression/eval", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref s) = expand {
            req_builder = req_builder.query(&[("expand", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&jira_expression_eval_request_bean);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
