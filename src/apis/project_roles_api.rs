/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct ProjectRolesApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl ProjectRolesApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> ProjectRolesApiClient {
        ProjectRolesApiClient { configuration }
    }
}

pub trait ProjectRolesApi {
    fn create_project_role_post(
        &self,
        create_update_role_request_bean: crate::models::CreateUpdateRoleRequestBean,
    ) -> Result<crate::models::ProjectRole, Error>;
    fn delete_project_role(&self, id: i64, swap: Option<i64>) -> Result<(), Error>;
    fn fully_update_project_role_put(
        &self,
        id: i64,
        create_update_role_request_bean: crate::models::CreateUpdateRoleRequestBean,
    ) -> Result<crate::models::ProjectRole, Error>;
    fn get_all_project_roles(&self) -> Result<Vec<crate::models::ProjectRole>, Error>;
    fn get_project_role(
        &self,
        project_id_or_key: &str,
        id: i64,
    ) -> Result<crate::models::ProjectRole, Error>;
    fn get_project_role_by_id(&self, id: i64) -> Result<crate::models::ProjectRole, Error>;
    fn get_project_role_details(
        &self,
        project_id_or_key: &str,
        current_member: Option<bool>,
        exclude_connect_addons: Option<bool>,
    ) -> Result<Vec<crate::models::ProjectRole>, Error>;
    fn get_project_roles(
        &self,
        project_id_or_key: &str,
    ) -> Result<::std::collections::HashMap<String, String>, Error>;
    fn partial_update_project_role_post(
        &self,
        id: i64,
        create_update_role_request_bean: crate::models::CreateUpdateRoleRequestBean,
    ) -> Result<crate::models::ProjectRole, Error>;
}

impl ProjectRolesApi for ProjectRolesApiClient {
    fn create_project_role_post(
        &self,
        create_update_role_request_bean: crate::models::CreateUpdateRoleRequestBean,
    ) -> Result<crate::models::ProjectRole, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/role", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&create_update_role_request_bean);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_project_role(&self, id: i64, swap: Option<i64>) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/role/{id}", configuration.base_path, id = id);
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref s) = swap {
            req_builder = req_builder.query(&[("swap", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn fully_update_project_role_put(
        &self,
        id: i64,
        create_update_role_request_bean: crate::models::CreateUpdateRoleRequestBean,
    ) -> Result<crate::models::ProjectRole, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/role/{id}", configuration.base_path, id = id);
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&create_update_role_request_bean);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_all_project_roles(&self) -> Result<Vec<crate::models::ProjectRole>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/role", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_project_role(
        &self,
        project_id_or_key: &str,
        id: i64,
    ) -> Result<crate::models::ProjectRole, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/project/{projectIdOrKey}/role/{id}",
            configuration.base_path,
            projectIdOrKey = crate::apis::urlencode(project_id_or_key),
            id = id
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_project_role_by_id(&self, id: i64) -> Result<crate::models::ProjectRole, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/role/{id}", configuration.base_path, id = id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_project_role_details(
        &self,
        project_id_or_key: &str,
        current_member: Option<bool>,
        exclude_connect_addons: Option<bool>,
    ) -> Result<Vec<crate::models::ProjectRole>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/project/{projectIdOrKey}/roledetails",
            configuration.base_path,
            projectIdOrKey = crate::apis::urlencode(project_id_or_key)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = current_member {
            req_builder = req_builder.query(&[("currentMember", &s.to_string())]);
        }
        if let Some(ref s) = exclude_connect_addons {
            req_builder = req_builder.query(&[("excludeConnectAddons", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_project_roles(
        &self,
        project_id_or_key: &str,
    ) -> Result<::std::collections::HashMap<String, String>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/rest/api/3/project/{projectIdOrKey}/role",
            configuration.base_path,
            projectIdOrKey = crate::apis::urlencode(project_id_or_key)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn partial_update_project_role_post(
        &self,
        id: i64,
        create_update_role_request_bean: crate::models::CreateUpdateRoleRequestBean,
    ) -> Result<crate::models::ProjectRole, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/rest/api/3/role/{id}", configuration.base_path, id = id);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref auth_conf) = configuration.basic_auth {
            req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
        };
        req_builder = req_builder.json(&create_update_role_request_bean);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
